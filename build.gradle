import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        maven {
            name 'Forge'
            url 'https://maven.minecraftforge.net'
        }
        if (project.use_mixins.toBoolean()) {
            maven {
                name 'MixinGradle'
                url 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
    }
    dependencies {
        if (project.use_mixins.toBoolean()) {
            classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        }
    }
}

plugins {
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'wtf.gofancy.fancygradle' version "${fancy_gradle_version}"
}

tasks.register('getVersionFromJava') {
    return getVersionFromJava()
}

version = getVersionFromJava()
group = project.maven_group
archivesBaseName = "${project.archives_base_name}-${project.minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

if (project.use_intellij_idea.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'idea'
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

if (project.use_eclipse.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'eclipse'
    }

    eclipse {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

minecraft {
    mappings channel: "${mcp_mappings_channel}", version: "${mcp_mappings_version}"

    if (project.has_access_transformer.toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/gregtech_at.cfg')
    }

    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
                jvmArg '-Dmixin.debug=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }
    }
}

repositories {
    maven {
        name = 'Cleanroom Maven'
        url = 'https://maven.cleanroommc.com'
    }
    maven {
        name = 'Sponge Maven'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven { //JEI
        name = 'Progwml6 Maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        name = 'Curse Maven'
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Hard Dependencies
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-${ccl_pid}:${ccl_fid}")

    // Soft Dependencies
    implementation fg.deobf("mezz.jei:jei_1.12.2:${project.jei_version}")
    implementation fg.deobf("curse.maven:top-${top_pid}:${top_fid}")
    implementation fg.deobf("curse.maven:ctm-${ctm_pid}:${ctm_fid}")
    implementation fg.deobf("curse.maven:groovyscript-${groovyscript_pid}:${groovyscript_fid}")
    implementation fg.deobf("curse.maven:ae2-extended-life-${ae2_pid}:${ae2_fid}")

    // this dependency cannot be deobfuscated by ForgeGradle
    implementation "curse.maven:crafttweaker-${crt_pid}:${crt_fid}"

    // Tests
    testImplementation("org.junit.jupiter:junit-jupiter:${junit_version}")
    testImplementation("org.hamcrest:hamcrest:${hamcrest_version}")

    // Compile-Time Dependencies
    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    if (project.use_mixins.toBoolean()) {
        compileOnly "zone.rong:mixinbooter:${mixinbooter_version}"
        runtimeOnly "zone.rong:mixinbooter:${mixinbooter_version}"

        annotationProcessor "org.spongepowered:mixin:${mixin_annotations_version}:processor"
    }

    // GroovyScript dependency
    // remove this if project.use_mixins is true
    runtimeOnly "zone.rong:mixinbooter:${mixinbooter_version}"
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        codeChickenLib
    }
}

if (project.build_deobfJar.toBoolean()) {
    // Create deobf dev jars
    tasks.register('deobfJar') {
        archiveClassifier.set("deobf")
        from sourceSets.main.output
    }
}

if (project.build_apiJar.toBoolean()) {
    // Create API library jar
    tasks.register('apiZip') {
        archiveClassifier.set("api")
        from(sourceSets.main.java) {
            include "gregtech/api/**"
        }
        from(sourceSets.main.output) {
            include "gregtech/api/**"
        }
    }
}

if (project.build_sourceJar.toBoolean()) {
    // Create source jar
    tasks.register('sourcesJar') {
        archiveClassifier.set("sources")
        from sourceSets.main.allJava
    }
}

// Loading resources, works even on IDE client runs
sourceSets {
    main {
        if (project.use_mixins.toBoolean()) {
            ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'
        }

        java {
            srcDirs = ["src/main/java", "src/api/java"]
        }

        resources {
            srcDirs = ["src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.classesDirectory)
}

jar {
    manifest {
        // noinspection GroovyAssignabilityCheck
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
            }
        }
        if (project.use_mixins.toBoolean()) {
            attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
        }
        attributes(attribute_map)
    }

    // exclude all files in src/api from being shipped in the jar
    // this prevents crashes in obfuscated environments
    file("src/api/").eachDirRecurse { dir ->
        exclude dir.name
    }
}

artifacts {
    if (project.build_deobfJar.toBoolean()) {
        archives deobfJar
    }
    if (project.build_apiJar.toBoolean()) {
        archives apiZip
    }
    if (project.build_sourceJar.toBoolean()) {
        archives sourcesJar
    }
}

// It is important to NOT re-obfuscate jars for the deobfuscated environment.
// Therefore, we do not finalize the 'jar' task with the 'reobfJar' task.
// The Forge FG5 example buildscript states otherwise, however it creates broken builds in deobfuscated environments.

processResources {
    // required to allow file expansion later
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'mcversion', minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand(['version': version, 'mcversion': minecraft_version])
    }

    // copy everything else except mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

test {
    testLogging {
        var testContainer = getTestLogging()
        testContainer.events(TestLogEvent.FAILED)
        testContainer.exceptionFormat(TestExceptionFormat.FULL)
        testContainer.showExceptions(true)
        testContainer.showStackTraces(true)
        testContainer.showCauses(true)
        testContainer.showStandardStreams(true)
    }

    useJUnitPlatform()
}

private String getVersionFromJava() {
    String major = '0'
    String minor = '0'
    String revision = '0'
    String extra = ''
    File sourceFile = files('src/main/java/gregtech/GregTechVersion.java').getSingleFile()

    String prefix = 'public static final int'
    String extraPrefix = 'public static final String'
    sourceFile.eachLine { line ->
        String s = line.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.size(), s.size() - 1)
            s = s.replace("=", " ").replace(" +", " ").trim()
            String[] pts = s.split(" ")

            // Switch on the variable name
            switch (pts[0]) {
                case "MAJOR" :
                    major = pts[pts.size() - 1]
                    break
                case "MINOR" :
                    minor = pts[pts.size() - 1]
                    break
                case "REVISION" :
                    revision = pts[pts.size() - 1]
                    break
            }
        } else if (s.startsWith(extraPrefix)) {
            s = s.substring(extraPrefix.size(), s.size() - 2)
            s = s.replace("=", " ").replace(" +", " ").replace("\"", " ").trim()
            String[] pts = s.split(" ")
            if (pts[0] == "EXTRA") {
                extra = pts[pts.size() - 1]
            }
        }
        return
    }

    if (extra != "") {
        return major + '.' + minor + '.' + revision + '-' + extra
    } else {
        return major + '.' + minor + '.' + revision
    }
}
