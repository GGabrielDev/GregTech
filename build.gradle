import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        maven {
            name 'Forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            name 'MixinGradle'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
    }
    dependencies {
        if (project.use_mixins.toBoolean()) {
            classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        }
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

tasks.register('getVersionFromJava') {
    return getVersionFromJava()
}

version = getVersionFromJava() //project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

//replace('@VERSION', version)
//replaceIn('GregTechVersion.java')

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

if (project.use_intellij_idea.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'idea'
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

if (project.use_eclipse.toBoolean()) {
    apply {
        plugin 'java'
        plugin 'eclipse'
    }

    eclipse {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    if (project.has_access_transformer.toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        // accessTransformer = file('src/main/resources/gregtech_at.cfg')
    }

    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
                jvmArg '-Dmixin.debug=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }
    }
}

repositories {
    maven {
        url = 'https://maven.cleanroommc.com'
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = 'Curse Maven'
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // CCL
    implementation fg.deobf('curse.maven:codechicken-lib-1-8-242818:2779848')

    // PAE
    implementation fg.deobf('curse.maven:ae2-extended-life-570458:3649419')

    implementation 'curse.maven:crafttweaker-239197:3935788'

    implementation fg.deobf('curse.maven:jei-238222:4364085')
    implementation fg.deobf('curse.maven:top-245211:2667280')
    implementation fg.deobf('curse.maven:ctm-267602:2915363')
    implementation fg.deobf('curse.maven:groovyscript-687577:4329872')


    //implementation (files("etc/jei_1.12.2-4.16.1.301.jar"))
    //implementation (files("etc/theoneprobe-1.12-1.4.28.jar"))
    //implementation (files("etc/CTM-MC1.12.2-1.0.2.31.jar"))
   // implementation fg.deobf(files("etc/groovyscript-0.1.0.jar"))

    testImplementation('org.junit.jupiter:junit-jupiter:5.9.1')
    testImplementation('org.hamcrest:hamcrest:2.2')
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    if (project.use_mixins.toBoolean()) {
        compileOnly 'zone.rong:mixinbooter:7.0'
        runtimeOnly 'zone.rong:mixinbooter:7.0'

        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }

    // groovyscript dependency
    runtimeOnly 'zone.rong:mixinbooter:7.0'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        codeChickenLib
    }
}

if (project.build_deobfJar.toBoolean()) {
    // Create deobf dev jars
    tasks.register('deobfJar') {
        archiveClassifier.set("deobf")
        from sourceSets.main.output
    }
}

if (project.build_apiJar.toBoolean()) {
    // Create API library jar
    tasks.register('apiZip') {
        archiveClassifier.set("api")
        from(sourceSets.main.java) {
            include "gregtech/api/**"
        }
        from(sourceSets.main.output) {
            include "gregtech/api/**"
        }
    }
}

if (project.build_sourceJar.toBoolean()) {
    // Create source jar
    tasks.register('sourcesJar') {
        archiveClassifier.set("sources")
        from sourceSets.main.allJava
    }
}

// Loading resources, works even on IDE client runs
sourceSets {
    main {
        if (project.use_mixins.toBoolean()) {
            ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'
        }

        java {
            srcDirs = ["src/main/java", "src/api/java"]
        }

        resources {
            srcDirs = ["src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.classesDirectory)
}

jar {
    manifest {
        // noinspection GroovyAssignabilityCheck
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
            }
        }
        if (project.use_mixins.toBoolean()) {
            attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
        }
        attributes(attribute_map)
    }
}

artifacts {
    if (project.build_deobfJar.toBoolean()) {
        archives deobfJar
    }
    if (project.build_apiJar.toBoolean()) {
        archives apiZip
    }
    if (project.build_sourceJar.toBoolean()) {
        archives sourcesJar
    }
}

jar.finalizedBy('reobfJar')

processResources {
    // required to allow file expansion later
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'mcversion', minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand(['version': version, 'mcversion': minecraft_version])
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

test {
    testLogging {
        var testContainer = getTestLogging()
        testContainer.events(TestLogEvent.FAILED)
        testContainer.exceptionFormat(TestExceptionFormat.FULL)
        testContainer.showExceptions(true)
        testContainer.showStackTraces(true)
        testContainer.showCauses(true)
        testContainer.showStandardStreams(true)
    }

    useJUnitPlatform()
}

private String getVersionFromJava() {
    String major = '0'
    String minor = '0'
    String revision = '0'
    String extra = ''
    File sourceFile = files('src/main/java/gregtech/GregTechVersion.java').getSingleFile()

    String prefix = 'public static final int'
    String extraPrefix = 'public static final String'
    sourceFile.eachLine { line ->
        String s = line.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.size(), s.size() - 1)
            s = s.replace("=", " ").replace(" +", " ").trim()
            String[] pts = s.split(" ")

            // Switch on the variable name
            switch (pts[0]) {
                case "MAJOR" :
                    major = pts[pts.size() - 1]
                    break
                case "MINOR" :
                    minor = pts[pts.size() - 1]
                    break
                case "REVISION" :
                    revision = pts[pts.size() - 1]
                    break
            }
        } else if (s.startsWith(extraPrefix)) {
            s = s.substring(extraPrefix.size(), s.size() - 2)
            s = s.replace("=", " ").replace(" +", " ").replace("\"", " ").trim()
            String[] pts = s.split(" ")
            if (pts[0] == "EXTRA") {
                extra = pts[pts.size() - 1]
            }
        }
        return
    }

    if (extra != "") {
        return major + '.' + minor + '.' + revision + '-' + extra
    } else {
        return major + '.' + minor + '.' + revision
    }
}
